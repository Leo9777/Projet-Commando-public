#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun May 23 14:55:06 2021
@author: mwa
"""

import numpy as np
from tkinter import *
from PIL import Image, ImageTk
import matplotlib.pyplot as pp
import matplotlib.colors
from matplotlib import cm
from matplotlib.colors import ListedColormap, LinearSegmentedColormap
from matplotlib.cm import ScalarMappable
from matplotlib.colors import Normalize

def wavelength_to_rgb(wavelength, gamma=0.8):
    ''' taken from http://www.noah.org/wiki/Wavelength_to_RGB_in_Python
    This converts a given wavelength of light to an 
    approximate RGB color value. The wavelength must be given
    in nanometers in the range from 380 nm through 750 nm
    (789 THz through 400 THz).
    Based on code by Dan Bruton
    http://www.physics.sfasu.edu/astro/color/spectra.html
    Additionally alpha value set to 0.5 outside range
    '''
    wavelength = float(wavelength)
    if wavelength >= 380 and wavelength <= 750:
        A = 1.
    else:
        A=0.5
    if wavelength < 380:
        wavelength = 380.
    if wavelength >750:
        wavelength = 750.
    if wavelength >= 380 and wavelength <= 440:
        attenuation = 0.3 + 0.7 * (wavelength - 380) / (440 - 380)
        R = ((-(wavelength - 440) / (440 - 380)) * attenuation) ** gamma
        G = 0.0
        B = (1.0 * attenuation) ** gamma
    elif wavelength >= 440 and wavelength <= 490:
        R = 0.0
        G = ((wavelength - 440) / (490 - 440)) ** gamma
        B = 1.0
    elif wavelength >= 490 and wavelength <= 510:
        R = 0.0
        G = 1.0
        B = (-(wavelength - 510) / (510 - 490)) ** gamma
    elif wavelength >= 510 and wavelength <= 580:
        R = ((wavelength - 510) / (580 - 510)) ** gamma
        G = 1.0
        B = 0.0
    elif wavelength >= 580 and wavelength <= 645:
        R = 1.0
        G = (-(wavelength - 645) / (645 - 580)) ** gamma
        B = 0.0
    elif wavelength >= 645 and wavelength <= 750:
        attenuation = 0.3 + 0.7 * (750 - wavelength) / (750 - 645)
        R = (1.0 * attenuation) ** gamma
        G = 0.0
        B = 0.0
    else:
        R = 0.0
        G = 0.0
        B = 0.0
    return (R,G,B,A)


def make_color_map ( wavelength ):
    """ Return a LinearSegmentedColormap going from transparent to full intensity
    for a wavelength given in nanometer .
    wavelength : float (in nm)
    """
    R, G, B, A = wavelength_to_rgb ( wavelength )
    colors = [(R,G,B,c) for c in np. linspace (0 ,1 ,100)]
    return matplotlib.colors.LinearSegmentedColormap . from_list ("mycmap ", colors )

#Fonction définissant le sinus cardinal
def sinc(x):
    return np.sinc(x/np.pi)

#Fonction renvoyant l'intensité lumineuse en fonction des paramètres de l'expérience
def I(I0,d,a,X,lamb,f,N,theta):
    c=2*np.pi/((f*lamb))
    y=[]
    for x in X:
        if x!=0:
            y.append(I0*(np.sin(c*N*(x-f*np.sin(theta))*d/2)/(N*np.sin(c*(x-f*np.sin(theta))*d/2)))**2*(sinc(c*(x-f*np.sin(theta))*a/2))**2)
        else:
            y.append(I0)
    return y

#Classe créant les graphiques d'intensités et figures d'interférences
class interference:
    
    def __init__(self):
        self.a=0
        self.d=0
        self.f=0
        self.N=0
        self.theta=0

    #Méthode créant le graphe de l'intensité       
    def graphe_intensite(self, lamb,ordre_poly=0, I0=1):
        ordre = 2*lamb*self.f/self.a
        if ordre_poly!=0:
            ordre=ordre_poly
        X=np.linspace(-ordre,ordre,1000)
        In=I(I0,self.d,self.a,X,lamb,self.f,self.N,self.theta)
        return X,In

    #Méthode créant la figure d'interférence
    def figure(self, lamb,ordre_poly=0, I0=1):
        ordre = 2*lamb*self.f/self.a
        if ordre_poly!=0:
            ordre=ordre_poly
        X,I=self.graphe_intensite(lamb,ordre_poly,I0)
        y,x=np.meshgrid(I,X)
        comap=make_color_map(lamb*10**9)
        extent=[-ordre,ordre,-ordre,ordre]
        return y, comap, extent

    #Méthode calculant l'ordre optimal du domaine de définition des graphes et figures pour plusieurs longueurs d'ondes 
    def ordrepoly(self,lamb_tab):
        ordre=[]
        for lamb in lamb_tab:
            ordre.append(2*lamb*self.f/self.a)
        ordrepoly=np.mean(ordre)
        return ordrepoly

    #Méthode créant la colorbar (légende de couleur) pour la figure d'interférence
    def colorbar(self, wv):
        R, G, B, A = wavelength_to_rgb (wv)
        colors = [(0, 0, 0), (R, G, B)]
        cm = LinearSegmentedColormap.from_list("Custom", colors, N=100)
        cmappable = ScalarMappable(norm=Normalize(0,1), cmap=cm)
        return cmappable

#Classe de gestion de l'affichage de la courbe d'intensité et de la figure d'interférences, permet le lien entre l'interface et le modèle physique à afficher
class Images():
    def __init__(self):
        self.sequence = 0
        self.interferences = interference()
        self.lamb = []
        self.fig_graph = pp.figure(1)
        self.fig_fig = pp.figure(2)

    #Mise à jour de tous les paramètres de l'expérience SAUF la longueur d'onde qui est gérée indépendamment par la classe Interface_onde
    def update_var(self):
        self.interferences.a = float(scale_taille_fentes.get()*10**(-6))
        self.interferences.d = float(scale_distance_fentes.get()*10**(-6))
        self.interferences.f = float(scale_focale.get()/100)
        self.interferences.N = int(scale_nombre_fentes.get())
        self.interferences.theta = float(np.radians(scale_angle.get()))
    
    #Tracé du graphe: on récupère l'image générée par Matplotlib et on l'affiche dans un conteneur qui sera défini plus bas, dans le corps du programme
    def trace_graphe(self, parent,lamb,ordre_poly=0, largeur=0):
        alpha=0.4
        if len(affichage.lamb)==1:
            alpha=1
        X,Ig = self.interferences.graphe_intensite(lamb,ordre_poly)
        R, G, B, A = wavelength_to_rgb(lamb*10**9)
        pp.figure(1)
        pp.plot(X, Ig,color=[R,G,B],alpha=alpha)
        pp.xlabel("Position sur l'écran (m)")
        pp.ylabel("Intensité lumineuse (cd)")
        pp.savefig("fig1.png")
        
        new_img = ImageTk.PhotoImage(Image.open("fig1.png").resize((432,288), Image.ANTIALIAS))
        img = Label(parent, image=new_img)
        img.image = new_img
        img.grid(column=0, row=0)
    
    #Pareil mais pour les figures d'interférences
    def trace_figures(self, parent,lamb=0,ordre_poly=0):
        alpha=0.4
        if len(affichage.lamb)==1:
            alpha=1
        fig, ax = pp.subplots()
        for l in affichage.lamb:
            y,comap,extent = self.interferences.figure(l,ordre_poly)
            ax.imshow(y,cmap=comap, extent=extent,alpha=alpha)
            ax.yaxis.set_visible(False)
            pp.xlabel("Position sur l'écran (m)")
        if len(affichage.lamb)==1:
            pp.colorbar(self.interferences.colorbar(l*10**9))#Affichage de la colorbar grâce à la classe
        pp. gca (). set_facecolor ("0")
        pp.savefig("fig2.png")
        new_img = ImageTk.PhotoImage(Image.open("fig2.png").resize((432,288), Image.ANTIALIAS))
        img = Label(parent, image=new_img)
        img.image = new_img
        img.grid(column=0, row=0)

#Classe qui gère la création d'une nouvelle onde dont on va fixer la longueur via l'interface
class Interface_onde():
    def __init__(self):
        self.curseur_lambda = Scale(frame_HD, orient=HORIZONTAL, label="Longueur d'onde[nm´]", length=190, from_=400, to=800)
    
    #Méthode appelée lorsque l'on clique sur le bouton "Nouvelle onde", elle crée un nouveau curseur et réagence l'interface
    def param_onde(self):
        bouton_supp.grid(column=0, row=8)
        bouton_schéma.grid(column=0, row=9)
        self.curseur_lambda.grid(column=0, row=7)
        bouton_onde.configure(text="Valider", command=self.add_onde)
        
    #Permet de valider la création d'une nouvelle onde lorsque l'on appuie sur le bouton "Valider". Ajoute la longueur d'onde sélectionnée à un array contenant toutes les valeurs de longueur d'onde
    def add_onde(self):
        lamb=int(self.curseur_lambda.get())*10**(-9)
        affichage.lamb.append(lamb)
        
        affichage.update_var()
        affichage.lamb.append(lamb)
        simulation()
        bouton_onde.configure(text='Nouvelle onde', command = self.param_onde)    
        self.curseur_lambda.grid_forget()
        
#Met à jour l'affichage des courbes à condition que l'on aie des valeurs dans l'array de longueurs d'ondes
def simulation():
    if len(affichage.lamb) == 0:
        print("Veuillez choisir")
    
    else:
        if affichage.sequence == 0:
            affichage.sequence = 1
            fenetre.geometry("630x728")
        
        affichage.update_var()
        ordre_poly=affichage.interferences.ordrepoly(affichage.lamb)
        for x in affichage.lamb:
            affichage.trace_graphe(frame_BG, x,ordre_poly)
        affichage.trace_figures(frame_HG,x,ordre_poly)

#Fonction appelée lorsque l'on clique sur le bouton "Effacer mémoire", supprime les valeurs dans l'array des longueurs d'onde
def effacer():
        affichage.lamb = []
        affichage.fig_graph.clf()

#Fonction appelée lorsque l'on clique sur le bouton "Afficher schéma", il permet d'ouvrir une nouvelle fenêtre pour afficher le schéma de l'expérience
def affiche_sch():
    new_fen = Tk()
    new_fen.geometry("735x520")
    new_fen.resizable(width=0, height=0)
    im = Image.open("schema.png")
    sch = ImageTk.PhotoImage(im, master = new_fen)
    fond = Label(new_fen, image =sch)
    fond.place(x=0,y=0, relwidth = 1, relheight=1)
    new_fen.mainloop()
    

#Création d'une nouvelle fenêtre, on fixe ses paramètres
fenetre = Tk()
fenetre.geometry("200x528")
fenetre.resizable(width=0, height=0)
fenetre.title("Super logiciel de simulation d'interférences")

#Création de 4 "conteneurs" correspondant à une découpage en 4 de la fenetre; permet de gérer l'agencement de notre fenetre
frame_HG = Frame(fenetre)
frame_HD = Frame(fenetre)
frame_BG = Frame(fenetre)
frame_lambdas = Frame(frame_HD)
frame_HG.grid(column=0, row=0)
frame_HD.grid(column=1, row=0)
frame_BG.grid(column=0, row=1)

#Création des objets que l'on va manipuler
affichage = Images()
interface_onde = Interface_onde()

#On va maintenant créer et placer tous les éléments de l'interface graphique
scale_nombre_fentes = Scale(frame_HD, orient=HORIZONTAL, label="Nombre de fentes", length=190, from_=1, to=10)
scale_nombre_fentes.grid(column=0, row=1)

scale_taille_fentes = Scale(frame_HD, orient=HORIZONTAL, label="Taille des fentes [micron]", length=190, from_=1, to=1000)
scale_taille_fentes.grid(column=0, row=2)

scale_distance_fentes = Scale(frame_HD, orient=HORIZONTAL, label="Distance interfentes[micron]", length=190, from_=10, to=1000, resolution=10)
scale_distance_fentes.grid(column=0, row=3)

scale_angle = Scale(frame_HD, orient=HORIZONTAL, label="Angle [en °]", length=190, from_=0, to=85)
scale_angle.grid(column=0, row=4)

scale_focale = Scale(frame_HD, orient=HORIZONTAL, label="Distance focale [cm]", length=170, from_=40, to=190)
scale_focale.grid(column=0, row=5)

bouton_onde= Button(frame_HD, text='Ajouter une onde', command = interface_onde.param_onde)
bouton_onde.grid(column=0, row=6)

bouton_supp = Button(frame_HD, text='Effacer mémoire', command = effacer)
bouton_supp.grid(column=0, row=7)

bouton_schéma = Button(frame_HD, text='Afficher schéma', command = affiche_sch)
bouton_schéma.grid(column=0, row=8)

fenetre.mainloop()
